name: build
on:
  push:
    branches:
      - '*'
    tags:
      - '*'
  pull_request:
    branches:
      - 'master'

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: 'Windows x64'
            os: windows-latest
            triplet: x64-windows
            vcpkg_dir: 'C:\vcpkg'
            suffix: 'windows-win32'
            generator: 'Visual Studio 16 2019'
            arch: '-A x64'
          - name: 'Windows x86'
            os: windows-latest
            triplet: x86-windows
            vcpkg_dir: 'C:\vcpkg'
            suffix: 'windows-win64'
            generator: 'Visual Studio 16 2019'
            arch: '-A Win32'
          - name: 'Linux x64'
            os: ubuntu-latest
            triplet: x64-linux
            suffix: 'linux-x86_64'
            vcpkg_dir: '/usr/local/share/vcpkg'
            generator: 'Unix Makefiles'
            arch: ''
          - name: 'Mac OSX x64'
            os: macos-latest
            triplet: x64-osx
            suffix: 'osx-x86_64'
            vcpkg_dir: '/usr/local/share/vcpkg'
            generator: 'Unix Makefiles'
            arch: ''

    steps:
      - name: Checkout
        uses: actions/checkout@v1
        with:
          submodules: true

      - name: Cache vcpkg
        uses: actions/cache@v2
        with:
          path: '${{ matrix.vcpkg_dir }}/installed'
          key: vcpkg-${{ matrix.triplet }}-${{ hashFiles('vcpkg.txt') }}
          restore-keys: |
            vcpkg-${{ matrix.triplet }}-

      - name: Install vcpkg packages
        shell: bash
        run: |
          vcpkg install --triplet ${{ matrix.triplet }} $(cat vcpkg.txt)

      - name: Configure
        shell: bash
        run: |
          mkdir build
          mkdir install
          if [ "$RUNNER_OS" == "Windows" ]; then
            cmake \
              -B ./build \
              -G "${{ matrix.generator }}" ${{ matrix.arch }} \
              -DCMAKE_INSTALL_PREFIX=./install \
              -DCMAKE_BUILD_TYPE=MinSizeRel \
              -DEXAMPLE_TESTS=ON \
              -DCMAKE_TOOLCHAIN_FILE=${{ matrix.vcpkg_dir }}/scripts/buildsystems/vcpkg.cmake \
              .
          else
            if [ "$RUNNER_OS" == "Linux" ]; then
              export CC=/usr/bin/gcc-9
              export CXX=/usr/bin/g++-9
            fi
            cmake \
              -B ./build \
              -G "${{ matrix.generator }}" \
              -DCMAKE_INSTALL_PREFIX=./install \
              -DCMAKE_BUILD_TYPE=MinSizeRel \
              -DEXAMPLE_TESTS=ON \
              -DCMAKE_TOOLCHAIN_FILE=${{ matrix.vcpkg_dir }}/scripts/buildsystems/vcpkg.cmake \
              .
          fi

      - name: Compile
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            cmake --build ./build --target INSTALL --config MinSizeRel
          else
            cmake --build ./build --target install --config MinSizeRel
          fi

      - name: List runtime dependencies
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            ldd ./install/bin/example
          elif [ "$RUNNER_OS" == "macOS" ]; then
            otool -L ./install/bin/example
          fi

      - name: Package
        id: create_artifact
        shell: bash
        run: |
          mkdir release
          if [ "$RUNNER_OS" == "Windows" ]; then
            ls ./install
            7z a -r example.zip ./install/*
          else
            cd ./install
            zip -r ./../example.zip *
            cd ..
          fi
          name=example-${{ matrix.suffix }}-$(git describe --always).zip
          mv -v ./example.zip release/${name}
          echo "::set-output name=name::${name}"
          echo "::set-output name=path::release/${name}"

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: Release
          path: release

      - name: Create Changelog
        id: create_changelog
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          last_tag=$(git describe --tags --abbrev=0 @^ || true)
          if [ -z "$last_tag" ]; then
            git log --oneline --format="%C(auto) %h %s" > changelog.txt
          else
            git log --oneline --format="%C(auto) %h %s" ${last_tag}..@ > changelog.txt
          fi
          cat changelog.txt

      - name: Release
        uses: ncipollo/release-action@v1
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          artifact: ${{ steps.create_artifact.outputs.path }}
          allowUpdates: true
          artifactContentType: application/zip
          bodyFile: changelog.txt
          draft: false
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
